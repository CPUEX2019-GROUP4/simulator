SOURCE = manip.src
TARGET = sim.cc run.cc run_label.cc

LTOKEN = //<
RTOKEN = //>
TOKEN  = //?
NINDENT = 2 # number of spaces for indent

EOF

## Samples
Let us assume that SOURCE is defined to be `manip.src`, TARGET is
`target1.cc target2.c`, LTOKEN is `//<`, RTOKEN is `//>` and
NINDENT is `2`.
Now assume content of SOURCE is as follows:
```
//<definition
uint32_t *inst_reg;           // instruction register
uint32_t pc = 0;                   // program counter
int32_t int_reg[N_REG];       // int
int32_t dest_reg;
//>

//<func1
void set_bold(int i)
{
  dest_reg = i;
    if (i > 0) std::cout << "set bold for r" << i << std::endl;
    else std::cout << "set bold for f" << -i << std::endl;
}
//>
```
Here, beware of the strange indentation in `func1`.
The `manip` program pastes the content defined in SOURCE to each of TARGET,
with a given **level**.
We assume `target1.cc` is as follows:
```
//?definition
//?func1
```
Then, the program pastes each of the content to the line below its caller,
and the new file `target1.cc.gen` will look like:
```
//?definition
//<definition
uint32_t *inst_reg;           // instruction register
uint32_t pc = 0;                   // program counter
int32_t int_reg[N_REG];       // int
int32_t dest_reg;
//>
//?func1
//<func1
void set_bold(int i)
{
  dest_reg = i;
}
//>
```
Like this, if no **level** is given to a content, the program interprets as
root level (level 0).
Next, we assumed `target2.c` looks like:
```
//?func1@1
int main(void) {
  //?definition
  return 0;
}
```
This file will be transformed into `target2.c.gen`:
```
//?func1@1
//<func1
void set_bold(int i)
{
  dest_reg = i;
    if (i > 0) std::cout << "set bold for r" << i << std::endl;
    else std::cout << "set bold for f" << -i << std::endl;
}
//>
int main(void) {
  //?definition
  //<definition
  uint32_t *inst_reg;           // instruction register
  uint32_t pc = 0;                   // program counter
  int32_t int_reg[N_REG];       // int
  int32_t dest_reg;
  //>
  return 0;
}
```
Here, beware that same indentation level is kept after the pasting.
